I actually didn't do any programming for this one, I was able to use the close form definition of a Fibonacci number:


def fib_num(n):
	g=(1+5**.5)/2
	return math.floor((g**n-(-g)**(-n))/(5**.5)+.5)

You can't solve for n exactly, but if you approximate ln(x^n+1) as ln(x), which is very accurate when x^n is very large I was able to get within 10 fib numbers of the answer, then using WolframAlpha I was able to to find the exact solution.